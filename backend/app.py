from fastapi import FastAPI, UploadFile, File, Form
from fastapi.responses import JSONResponse, Response
from fastapi.middleware.cors import CORSMiddleware
from visual import WallFloorReplacer
import cv2
import numpy as np
import tempfile
import os
import json
import base64

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

API_KEY = ".... api"
replacer = WallFloorReplacer(api_key=API_KEY)

def save_upload_file(upload_file: UploadFile) -> str:
    suffix = os.path.splitext(upload_file.filename)[1]
    with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as tmp:
        tmp.write(upload_file.file.read())
        return tmp.name

def create_blank_image(path: str):
    blank = np.ones((10, 10, 3), dtype=np.uint8) * 255
    cv2.imwrite(path, blank)
    

@app.post("/detect")
async def detect(image: UploadFile = File(...)):
    try:
        # B1: L∆∞u ·∫£nh upload v√†o file t·∫°m
        input_path = save_upload_file(image)
        print(f"üì• Nh·∫≠n ·∫£nh t·ª´ client: {input_path}")

        # B2: G·ªçi visualize_detections (tr·∫£ v·ªÅ ·∫£nh + danh s√°ch predictions)
        visualized_path = input_path + "_viz.jpg"
        image_np, predictions = replacer.visualize_detections(input_path, visualized_path)
        print(f"‚úÖ Ph√°t hi·ªán {len(predictions)} v√πng t∆∞·ªùng/s√†n")

        # B3: M√£ h√≥a ·∫£nh k·∫øt qu·∫£ (sau khi v·∫Ω box) sang base64
        success, encoded_img = cv2.imencode(".jpg", image_np)
        if not success:
            raise Exception("‚ùå Kh√¥ng th·ªÉ m√£ h√≥a ·∫£nh")

        img_base64 = base64.b64encode(encoded_img.tobytes()).decode("utf-8")

        # B4: Tr·∫£ k·∫øt qu·∫£ v·ªÅ frontend
        return {
            "predictions": predictions,
            "image": img_base64
        }

    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω /detect: {e}")
        return JSONResponse(content={"error": str(e)}, status_code=500)
    
@app.get("/solid_color_image")
def solid_color_image(hex: str):
    try:
        hex = hex.strip("#")
        rgb = tuple(int(hex[i:i+2], 16) for i in (0, 2, 4))
        img = np.full((50, 50, 3), rgb, dtype=np.uint8)
        _, img_encoded = cv2.imencode(".jpg", img)
        return Response(content=img_encoded.tobytes(), media_type="image/jpeg")
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)


@app.post("/render_with_masks")
async def render_with_masks(
    image: UploadFile = File(...),
    floor_texture: UploadFile = File(None),
    wall_texture: UploadFile = File(None),
    predictions: str = Form(...)  # JSON d·∫°ng string t·ª´ client
):
    try:
        # T·∫°o file t·∫°m t·ª´ ·∫£nh v√† texture
        input_path = save_upload_file(image)
        floor_path = save_upload_file(floor_texture) if floor_texture else tempfile.NamedTemporaryFile(suffix=".jpg", delete=False).name
        wall_path = save_upload_file(wall_texture) if wall_texture else tempfile.NamedTemporaryFile(suffix=".jpg", delete=False).name

        if not floor_texture:
            create_blank_image(floor_path)
        if not wall_texture:
            create_blank_image(wall_path)

        output_path = tempfile.NamedTemporaryFile(suffix=".jpg", delete=False).name

        # Parse chu·ªói JSON predictions th√†nh danh s√°ch Python
        parsed_predictions = json.loads(predictions)

        # G·ªçi process_with_predictions v·ªõi polygon ho·∫∑c bbox ƒë·ªÅu h·ªó tr·ª£
        replacer.process_with_predictions(
            input_path, floor_path, wall_path, parsed_predictions, output_path
        )

        # Tr·∫£ ·∫£nh k·∫øt qu·∫£ v·ªÅ client
        with open(output_path, "rb") as f:
            image_data = f.read()
        return Response(content=image_data, media_type="image/jpeg")

    except Exception as e:
        print(f"‚ùå L·ªói x·ª≠ l√Ω /render_with_masks: {e}")
        return JSONResponse(content={"error": str(e)}, status_code=500)
